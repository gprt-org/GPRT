#include "sharedCode.h"

struct ColorPayload {
  float3 color;
};

struct TriangleAttributes {
  float2 bc;
};

// This closest hit shader runs when a ray hits a triangle.
// It processes per-geometry data and communicates with the ray generation shader.
// - The first parameter is the shader record type, representing SBT parameters for this shader.
// - The second is the ray payload type, used for passing data between shaders.
// - The third is the intersection attributes. For triangles, these are two "barycentrics", used 
//   for interpolating per-vertex values.
[shader("closesthit")]
void TriangleMesh(
  ShaderRecord<TrianglesGeomData> record, 
  HitAttribute<TriangleAttributes> tri,
  PayloadState<ColorPayload> payload) {
  payload.color = float3(tri.bc.x, tri.bc.y, 1.0 - (tri.bc.x + tri.bc.y));
}

// This ray generation program will kick off the ray tracing process,
// generating rays and tracing them into the world.
[shader("raygeneration")]
void raygen(PushConstant<RTConstants> pc, ShaderRecord<RayGenData> record) {
  ColorPayload payload;
  uint2 pixelID = DispatchRaysIndex().xy;
  uint2 iResolution = DispatchRaysDimensions().xy;

  // camera movement
  float an = pc.time;
  float3 ro = float3(-4.0 * sin(an), 0.0, -4.0 * cos(an));
  float3 ta = float3(0.0, 0.0, 0.0);

  // camera matrix
  float3 ww = normalize(ta - ro);
  float3 uu = normalize(cross(ww, float3(0.0, -1.0, 0.0)));
  float3 vv = normalize(cross(uu, ww));

  float3 tot = float3(0.0);

  for (int m = 0; m < AA; m++)
  for (int n = 0; n < AA; n++)
  {
    // pixel coordinates
    float2 o = float2(float(m), float(n)) / float(AA) - 0.5;
    float2 p = (2.0 * (pixelID + o) - iResolution.xy) / iResolution.y;

    // create view ray
    float3 rd = normalize(p.x * uu + p.y * vv + 3.0 * ww);

    // Trace the ray into the scene
    RayDesc rayDesc;
    rayDesc.Origin = ro;
    rayDesc.Direction = rd;
    rayDesc.TMin = 0.0;
    rayDesc.TMax = 10000.0;
    TraceRay(record.world, RAY_FLAG_NONE, 0xff, 0, 0, rayDesc, payload);

    // Accumulate the color
    tot += payload.color;
  }
  tot /= float(AA * AA);

  const int fbOfs = pixelID.x + iResolution.x * pixelID.y;
  record.frameBuffer[fbOfs] = gprt::make_bgra(tot);
}

[shader("miss")]
void miss(PushConstant<RTConstants> pc, PayloadState<ColorPayload> payload) {
  payload.color = float3(0.f);
}
